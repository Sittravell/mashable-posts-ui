{"ast":null,"code":"import React from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar what_debug_changed = 0;\nvar configuration = {\n  active: true\n};\nfunction setUseWhatChange(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$active = _ref.active,\n    active = _ref$active === void 0 ? true : _ref$active;\n  configuration = _extends({}, configuration, {\n    active: active\n  });\n}\n/**\r\n * Taken random color logic from some stackoverflow answer\r\n */\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n/**\r\n *\r\n * Check whether the dependency item is an object. then\r\n */\n\nvar isObject = function isObject(t) {\n  return Object.prototype.toString.call(t) === '[object Object]';\n};\nfunction getPrintableInfo(dependencyItem) {\n  /**\r\n   * Printing the info into viewable format\r\n   */\n  if (isObject(dependencyItem) || Array.isArray(dependencyItem)) {\n    var ans;\n    try {\n      ans = JSON.stringify(dependencyItem, null, 2);\n    } catch (e) {\n      ans = 'CIRCULAR JSON';\n    }\n    return ans;\n  }\n  return dependencyItem;\n} // const isDevelopment = process.env['NODE_ENV'] === 'development';\n\nfunction useHotRefs(value) {\n  var fnRef = React.useRef(value);\n  React.useEffect(function () {\n    fnRef.current = value;\n  });\n  return fnRef;\n}\nfunction useWhatChanged(dependency, dependencyNames, suffix, hookName) {\n  // It's a fair assumption the hooks type will not change for a component during\n  // its life time\n  var hookNameFinal = React.useMemo(function () {\n    if (hookName === \"useLayoutEffect\") {\n      return \"useLayoutEffect\";\n    } // if(hookName === \"useEffect\" || !hookName) {\n\n    return \"useEffect\"; // }\n  }, []); // This ref is responsible for book keeping of the old value\n\n  var dependencyRef = React.useRef(dependency); // For count bookkeeping , for easy debugging\n\n  var whatChangedHookCountRef = React.useRef(1); // For assigning color for easy debugging\n\n  var backgroundColorRef = React.useRef('');\n  var isDependencyArr = Array.isArray(dependencyRef.current);\n  React[hookNameFinal](function () {\n    if (dependencyRef.current && isDependencyArr // dependencyRef.current.length > 0\n    ) {\n      what_debug_changed++;\n      whatChangedHookCountRef.current = what_debug_changed;\n      backgroundColorRef.current = getRandomColor();\n    } // const MyWindow: IWindow = window;\n  }, [dependencyRef, isDependencyArr]);\n  function postConsole() {\n    console.log('\\n');\n    console.log(\"%c///// END SECTION/////\", \"background: \" + backgroundColorRef.current + \"; color: white; font-size: 10px\", '\\n');\n    console.log('\\n');\n    console.log('\\n');\n  }\n  function logBanners(_ref2) {\n    var isFirstMount = _ref2.isFirstMount,\n      suffixText = _ref2.suffixText,\n      isBlankArrayAsDependency = _ref2.isBlankArrayAsDependency;\n    if (configuration.active) {\n      console.log(\"%c///// START SECTION /////\", \"background: \" + backgroundColorRef.current + \"; color: white; font-size: 10px\", '\\n');\n      console.log('\\n');\n      console.log(\"%c \" + whatChangedHookCountRef.current + \" \" + (suffix || ''), \"background: \" + backgroundColorRef.current + \"; color: white; font-size: 10px\", 'üëáüèæ', \"\" + (isFirstMount ? 'FIRST RUN' : 'UPDATES'), \"\" + suffixText);\n      if (isBlankArrayAsDependency) {\n        postConsole();\n      }\n    }\n  }\n  var longBannersRef = useHotRefs(logBanners);\n  React[hookNameFinal](function () {\n    if (!(dependencyRef.current && isDependencyArr)) {\n      return;\n    } // if (dependencyRef.current.length === 0) {\n    //   return;\n    // }\n    // More info, if needed by user\n\n    var stringSplitted = dependencyNames ? dependencyNames.split(',') : null;\n    var changed = false;\n    var whatChanged = dependency ? dependency.reduce(function (acc, dep, index) {\n      if (dependencyRef.current && dep !== dependencyRef.current[index]) {\n        var oldValue = dependencyRef.current[index];\n        dependencyRef.current[index] = dep;\n        if (dependencyNames && stringSplitted) {\n          changed = true;\n          acc[\"\\\"\\u2705\\\" \" + stringSplitted[index]] = {\n            'Old Value': getPrintableInfo(oldValue),\n            'New Value': getPrintableInfo(dep)\n          };\n        } else {\n          acc[\"\\\"\\u2705\\\" \" + index] = {\n            'Old Value': getPrintableInfo(oldValue),\n            'New Value': getPrintableInfo(dep)\n          };\n        }\n        return acc;\n      }\n      if (dependencyNames && stringSplitted) {\n        acc[\"\\\"\\u23FA\\\" \" + stringSplitted[index]] = {\n          'Old Value': getPrintableInfo(dep),\n          'New Value': getPrintableInfo(dep)\n        };\n      } else {\n        acc[\"\\\"\\u23FA\\\" \" + index] = {\n          'Old Value': getPrintableInfo(dep),\n          'New Value': getPrintableInfo(dep)\n        };\n      }\n      return acc;\n    }, {}) : {};\n    if (configuration.active) {\n      var isBlankArrayAsDependency = whatChanged && Object.keys(whatChanged).length === 0 && isDependencyArr;\n      longBannersRef.current({\n        isFirstMount: !changed,\n        suffixText: isBlankArrayAsDependency ? \" \\uD83D\\uDC49\\uD83C\\uDFFD This will run only once on mount.\" : \"\",\n        isBlankArrayAsDependency: isBlankArrayAsDependency\n      });\n      if (!isBlankArrayAsDependency) {\n        console.table(whatChanged);\n        postConsole();\n      }\n    }\n  }, [].concat(function () {\n    if (dependency && isDependencyArr) {\n      return dependency;\n    }\n    return [];\n  }(), [dependencyRef, longBannersRef, hookName]));\n}\nexport { setUseWhatChange, useWhatChanged };","map":{"version":3,"names":["what_debug_changed","configuration","active","setUseWhatChange","_temp","_ref$active","_extends","getRandomColor","letters","color","i","Math","floor","random","isObject","t","Object","prototype","toString","call","getPrintableInfo","dependencyItem","Array","isArray","ans","JSON","stringify","e","useHotRefs","value","fnRef","React","useRef","useEffect","current","useWhatChanged","dependency","dependencyNames","suffix","hookName","hookNameFinal","useMemo","dependencyRef","whatChangedHookCountRef","backgroundColorRef","isDependencyArr","postConsole","console","log","logBanners","_ref2","isFirstMount","suffixText","isBlankArrayAsDependency","longBannersRef","stringSplitted","split","changed","whatChanged","reduce","acc","dep","index","oldValue","keys","length","table","concat"],"sources":["/Users/sivanthisittravell/Documents/mashable-posts-ui/node_modules/@simbathesailor/use-what-changed/src/useWhatChanged.tsx"],"sourcesContent":["import React from 'react';\n\ntype TypeDependency = any[];\ntype TypeDependencyNames = string;\n\nlet what_debug_changed = 0;\n\nlet configuration = { active: true };\nfunction setUseWhatChange({ active = true }: any = {}) {\n  configuration = { ...configuration, active };\n}\n\n/**\n * Taken random color logic from some stackoverflow answer\n */\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n/**\n *\n * Check whether the dependency item is an object. then\n */\nconst isObject = (t: any) => {\n  return Object.prototype.toString.call(t) === '[object Object]';\n};\n\nfunction getPrintableInfo(dependencyItem: any) {\n  /**\n   * Printing the info into viewable format\n   */\n  if (isObject(dependencyItem) || Array.isArray(dependencyItem)) {\n    let ans;\n    try {\n      ans = JSON.stringify(dependencyItem, null, 2);\n    } catch (e) {\n      ans = 'CIRCULAR JSON';\n    }\n    return ans;\n  }\n\n  return dependencyItem;\n}\n\n// const isDevelopment = process.env['NODE_ENV'] === 'development';\n\nfunction useHotRefs(value: any) {\n  const fnRef = React.useRef(value);\n  React.useEffect(() => {\n    fnRef.current = value;\n  });\n\n  return fnRef;\n}\n\nfunction useWhatChanged(\n  dependency?: TypeDependency,\n  dependencyNames?: TypeDependencyNames,\n  suffix?: string,\n  hookName?: string\n) {\n  \n  // It's a fair assumption the hooks type will not change for a component during\n  // its life time\n  const hookNameFinal = React.useMemo(() => {\n\n   \n    if(hookName === \"useLayoutEffect\") {\n      return \"useLayoutEffect\"\n    }\n\n    // if(hookName === \"useEffect\" || !hookName) {\n      return \"useEffect\"\n    // }\n  }, [])\n  // This ref is responsible for book keeping of the old value\n  const dependencyRef = React.useRef(dependency);\n\n  // For count bookkeeping , for easy debugging\n  const whatChangedHookCountRef = React.useRef(1);\n\n  // For assigning color for easy debugging\n  const backgroundColorRef = React.useRef('');\n\n  let isDependencyArr = Array.isArray(dependencyRef.current);\n\n  React[hookNameFinal](() => {\n   \n      if (\n        dependencyRef.current &&\n        isDependencyArr\n        // dependencyRef.current.length > 0\n      ) {\n        what_debug_changed++;\n  \n        whatChangedHookCountRef.current = what_debug_changed;\n        backgroundColorRef.current = getRandomColor();\n      }\n   \n    // const MyWindow: IWindow = window;\n    \n  }, [dependencyRef, isDependencyArr]);\n\n  function postConsole() {\n    console.log('\\n');\n    console.log(\n      `%c///// END SECTION/////`,\n      `background: ${backgroundColorRef.current}; color: white; font-size: 10px`,\n      '\\n'\n    );\n    console.log('\\n');\n    console.log('\\n');\n  }\n  function logBanners({\n    isFirstMount,\n    suffixText,\n    isBlankArrayAsDependency,\n  }: {\n    isFirstMount?: boolean;\n    suffixText?: string;\n    isBlankArrayAsDependency?: boolean;\n  }) {\n    if (configuration.active) {\n      console.log(\n        `%c///// START SECTION /////`,\n        `background: ${backgroundColorRef.current}; color: white; font-size: 10px`,\n        '\\n'\n      );\n      console.log('\\n');\n      console.log(\n        `%c ${whatChangedHookCountRef.current} ${suffix || ''}`,\n        `background: ${backgroundColorRef.current}; color: white; font-size: 10px`,\n        'üëáüèæ',\n        `${isFirstMount ? 'FIRST RUN' : 'UPDATES'}`,\n        `${suffixText}`\n      );\n\n      if (isBlankArrayAsDependency) {\n        postConsole();\n      }\n    }\n  }\n\n  const longBannersRef = useHotRefs(logBanners);\n\n  React[hookNameFinal](() => {\n\n   \n      if (!(dependencyRef.current && isDependencyArr)) {\n        return;\n      }\n  \n      // if (dependencyRef.current.length === 0) {\n      //   return;\n      // }\n  \n      // More info, if needed by user\n      const stringSplitted = dependencyNames ? dependencyNames.split(',') : null;\n      let changed = false;\n      const whatChanged = dependency\n        ? dependency.reduce((acc, dep, index) => {\n            if (dependencyRef.current && dep !== dependencyRef.current[index]) {\n              const oldValue = dependencyRef.current[index];\n              dependencyRef.current[index] = dep;\n              if (dependencyNames && stringSplitted) {\n                changed = true;\n                acc[`\"‚úÖ\" ${stringSplitted[index]}`] = {\n                  'Old Value': getPrintableInfo(oldValue),\n                  'New Value': getPrintableInfo(dep),\n                };\n              } else {\n                acc[`\"‚úÖ\" ${index}`] = {\n                  'Old Value': getPrintableInfo(oldValue),\n                  'New Value': getPrintableInfo(dep),\n                };\n              }\n  \n              return acc;\n            }\n            if (dependencyNames && stringSplitted) {\n              acc[`\"‚è∫\" ${stringSplitted[index]}`] = {\n                'Old Value': getPrintableInfo(dep),\n                'New Value': getPrintableInfo(dep),\n              };\n            } else {\n              acc[`\"‚è∫\" ${index}`] = {\n                'Old Value': getPrintableInfo(dep),\n                'New Value': getPrintableInfo(dep),\n              };\n            }\n  \n            return acc;\n          }, {})\n        : {};\n      if (configuration.active) {\n        const isBlankArrayAsDependency =\n          whatChanged && Object.keys(whatChanged).length === 0 && isDependencyArr;\n        longBannersRef.current({\n          isFirstMount: !changed,\n          suffixText: isBlankArrayAsDependency\n            ? ` üëâüèΩ This will run only once on mount.`\n            : ``,\n          isBlankArrayAsDependency,\n        });\n  \n        if (!isBlankArrayAsDependency) {\n          console.table(whatChanged);\n          postConsole();\n        }\n      }\n   \n   \n  }, [\n    ...(() => {\n      if (dependency && isDependencyArr) {\n        return dependency;\n      }\n      return [];\n    })(),\n    dependencyRef,\n    longBannersRef,\n    hookName\n  ]);\n}\n\nexport { useWhatChanged, setUseWhatChange };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}