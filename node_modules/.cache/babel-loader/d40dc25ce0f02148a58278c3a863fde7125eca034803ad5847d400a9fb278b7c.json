{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { CanceledError } from \"axios\";\nimport { Post } from \"../+requests\";\nexport function usePostsRetriever({\n  page\n}) {\n  _s();\n  const [list, setList] = useState([]);\n  const [isListError, setIsListError] = useState(false);\n  const [isListLoading, setIsListLoading] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isLastPage, setIsLastPage] = useState(false);\n  const getList = useCallback(async abortSignal => {\n    if (isLastPage) {\n      return;\n    }\n    setIsListLoading(true);\n    setIsListError(false);\n    try {\n      const res = await Post.getList({\n        page,\n        itemsPerPage: 35\n      }, abortSignal);\n      const newList = res.data.data;\n      if (newList.length === 0) {\n        setIsLastPage(true);\n      }\n      setList(list => [...list, ...newList]);\n    } catch (error) {\n      if (!(error instanceof CanceledError)) {\n        setIsListError(true);\n      }\n    } finally {\n      setIsListLoading(false);\n      setIsInitialized(true);\n    }\n  }, [isLastPage, page]);\n  useEffect(() => {\n    const ac = new AbortController();\n    void getList(ac.signal);\n    return () => {\n      ac.abort();\n    };\n  }, [getList]);\n  return {\n    list,\n    isListInitialized: isInitialized,\n    isListError,\n    isListLoading,\n    fetchList: getList\n  };\n}\n_s(usePostsRetriever, \"mJA8A+hsldr45T9v9qPhr8VbHxw=\");","map":{"version":3,"names":["useCallback","useEffect","useState","CanceledError","Post","usePostsRetriever","page","_s","list","setList","isListError","setIsListError","isListLoading","setIsListLoading","isInitialized","setIsInitialized","isLastPage","setIsLastPage","getList","abortSignal","res","itemsPerPage","newList","data","length","error","ac","AbortController","signal","abort","isListInitialized","fetchList"],"sources":["/Users/sivanthisittravell/Documents/mashable-posts-ui/src/app/posts/use-posts-retriever.ts"],"sourcesContent":["import {useCallback, useEffect, useState} from \"react\";\nimport {CanceledError, GenericAbortSignal} from \"axios\";\nimport {Post, PostItem, PostListResponseModel} from \"../+requests\";\n\ninterface Props {\n    page: number;\n}\n\nexport function usePostsRetriever({\n    page\n}: Props) {\n    const [list, setList] = useState<PostItem[]>([])\n    const [isListError, setIsListError] = useState(false)\n    const [isListLoading, setIsListLoading] = useState(false)\n    const [isInitialized, setIsInitialized] = useState(false)\n    const [isLastPage, setIsLastPage] = useState(false)\n\n    const getList = useCallback(async (abortSignal: GenericAbortSignal) => {\n        if (isLastPage) {\n            return;\n        }\n\n        setIsListLoading(true)\n        setIsListError(false)\n        try {\n            const res: PostListResponseModel = await Post.getList({page, itemsPerPage: 35}, abortSignal)\n            const newList = res.data.data\n\n            if (newList.length === 0) {\n                setIsLastPage(true)\n            }\n\n            setList(list => [...list, ...newList])\n        } catch (error) {\n            if (!(error instanceof CanceledError)) {\n                setIsListError(true)\n            }\n        } finally {\n            setIsListLoading(false)\n            setIsInitialized(true)\n        }\n\n    }, [isLastPage, page]);\n\n    useEffect(() => {\n        const ac = new AbortController()\n        void getList(ac.signal)\n\n        return () => {\n            ac.abort()\n        }\n    }, [getList]);\n\n    return {\n        list,\n        isListInitialized: isInitialized,\n        isListError,\n        isListLoading,\n        fetchList: getList,\n    }\n}\n"],"mappings":";AAAA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACtD,SAAQC,aAAa,QAA2B,OAAO;AACvD,SAAQC,IAAI,QAAwC,cAAc;AAMlE,OAAO,SAASC,iBAAiBA,CAAC;EAC9BC;AACG,CAAC,EAAE;EAAAC,EAAA;EACN,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAa,EAAE,CAAC;EAChD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMgB,OAAO,GAAGlB,WAAW,CAAC,MAAOmB,WAA+B,IAAK;IACnE,IAAIH,UAAU,EAAE;MACZ;IACJ;IAEAH,gBAAgB,CAAC,IAAI,CAAC;IACtBF,cAAc,CAAC,KAAK,CAAC;IACrB,IAAI;MACA,MAAMS,GAA0B,GAAG,MAAMhB,IAAI,CAACc,OAAO,CAAC;QAACZ,IAAI;QAAEe,YAAY,EAAE;MAAE,CAAC,EAAEF,WAAW,CAAC;MAC5F,MAAMG,OAAO,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI;MAE7B,IAAID,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;QACtBP,aAAa,CAAC,IAAI,CAAC;MACvB;MAEAR,OAAO,CAACD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGc,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZ,IAAI,EAAEA,KAAK,YAAYtB,aAAa,CAAC,EAAE;QACnCQ,cAAc,CAAC,IAAI,CAAC;MACxB;IACJ,CAAC,SAAS;MACNE,gBAAgB,CAAC,KAAK,CAAC;MACvBE,gBAAgB,CAAC,IAAI,CAAC;IAC1B;EAEJ,CAAC,EAAE,CAACC,UAAU,EAAEV,IAAI,CAAC,CAAC;EAEtBL,SAAS,CAAC,MAAM;IACZ,MAAMyB,EAAE,GAAG,IAAIC,eAAe,CAAC,CAAC;IAChC,KAAKT,OAAO,CAACQ,EAAE,CAACE,MAAM,CAAC;IAEvB,OAAO,MAAM;MACTF,EAAE,CAACG,KAAK,CAAC,CAAC;IACd,CAAC;EACL,CAAC,EAAE,CAACX,OAAO,CAAC,CAAC;EAEb,OAAO;IACHV,IAAI;IACJsB,iBAAiB,EAAEhB,aAAa;IAChCJ,WAAW;IACXE,aAAa;IACbmB,SAAS,EAAEb;EACf,CAAC;AACL;AAACX,EAAA,CApDeF,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}