{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { CanceledError } from \"axios\";\nimport { useAxiosInstance } from \"./use-axios-instance\";\nexport function usePostsRetriever({\n  page\n}) {\n  _s();\n  const [list, setList] = useState([]);\n  const [isListError, setIsListError] = useState(false);\n  const [isListLoading, setIsListLoading] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isLastPage, setIsLastPage] = useState(false);\n  const {\n    client\n  } = useAxiosInstance();\n  const getList = useCallback(async abortSignal => {\n    if (isLastPage) {\n      return;\n    }\n    setIsListLoading(true);\n    setIsListError(false);\n    try {\n      const res = await client.get(`api/posts?page=${page}`, {\n        signal: abortSignal\n      });\n      const newList = res.data.data;\n      if (newList.length === 0) {\n        setIsLastPage(true);\n      }\n      setList(list => [...list, ...newList]);\n    } catch (error) {\n      if (!(error instanceof CanceledError)) {\n        setIsListError(true);\n      }\n    } finally {\n      setIsListLoading(false);\n      setIsInitialized(true);\n    }\n  }, [client, isLastPage, page]);\n  useEffect(() => {\n    const ac = new AbortController();\n    void getList(ac.signal);\n    return () => {\n      ac.abort();\n    };\n  }, [getList]);\n  return {\n    list,\n    isListInitialized: isInitialized,\n    isListError,\n    isListLoading,\n    fetchList: getList\n  };\n}\n_s(usePostsRetriever, \"z9F4FIO0WL6fhOLLGKXUXhs9a1c=\", false, function () {\n  return [useAxiosInstance];\n});","map":{"version":3,"names":["useCallback","useEffect","useState","CanceledError","useAxiosInstance","usePostsRetriever","page","_s","list","setList","isListError","setIsListError","isListLoading","setIsListLoading","isInitialized","setIsInitialized","isLastPage","setIsLastPage","client","getList","abortSignal","res","get","signal","newList","data","length","error","ac","AbortController","abort","isListInitialized","fetchList"],"sources":["/Users/sivanthisittravell/Documents/mashable-posts-ui/src/app/+utils/use-posts-retriever.ts"],"sourcesContent":["import {useCallback, useEffect, useState} from \"react\";\nimport {Post, PostListResponseModel} from \"../App\";\nimport {CanceledError, GenericAbortSignal} from \"axios\";\nimport {useAxiosInstance} from \"./use-axios-instance\";\n\ninterface Props {\n    page: number;\n}\n\nexport function usePostsRetriever({\n    page\n}: Props) {\n    const [list, setList] = useState<Post[]>([])\n    const [isListError, setIsListError] = useState(false)\n    const [isListLoading, setIsListLoading] = useState(false)\n    const [isInitialized, setIsInitialized] = useState(false)\n    const [isLastPage, setIsLastPage] = useState(false)\n\n    const {client} = useAxiosInstance()\n\n    const getList = useCallback(async (abortSignal: GenericAbortSignal) => {\n        if (isLastPage) {\n            return;\n        }\n\n        setIsListLoading(true)\n        setIsListError(false)\n        try {\n            const res: PostListResponseModel = await client.get(`api/posts?page=${page}`, {signal: abortSignal})\n            const newList = res.data.data\n\n            if (newList.length === 0) {\n                setIsLastPage(true)\n            }\n\n            setList(list => [...list, ...newList])\n        } catch (error) {\n            if (!(error instanceof CanceledError)) {\n                setIsListError(true)\n            }\n        } finally {\n            setIsListLoading(false)\n            setIsInitialized(true)\n        }\n\n    }, [client, isLastPage, page]);\n\n    useEffect(() => {\n        const ac = new AbortController()\n        void getList(ac.signal)\n\n        return () => {\n            ac.abort()\n        }\n    }, [getList]);\n\n    return {\n        list,\n        isListInitialized: isInitialized,\n        isListError,\n        isListLoading,\n        fetchList: getList,\n    }\n}\n"],"mappings":";AAAA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEtD,SAAQC,aAAa,QAA2B,OAAO;AACvD,SAAQC,gBAAgB,QAAO,sBAAsB;AAMrD,OAAO,SAASC,iBAAiBA,CAAC;EAC9BC;AACG,CAAC,EAAE;EAAAC,EAAA;EACN,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAS,EAAE,CAAC;EAC5C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAM;IAACgB;EAAM,CAAC,GAAGd,gBAAgB,CAAC,CAAC;EAEnC,MAAMe,OAAO,GAAGnB,WAAW,CAAC,MAAOoB,WAA+B,IAAK;IACnE,IAAIJ,UAAU,EAAE;MACZ;IACJ;IAEAH,gBAAgB,CAAC,IAAI,CAAC;IACtBF,cAAc,CAAC,KAAK,CAAC;IACrB,IAAI;MACA,MAAMU,GAA0B,GAAG,MAAMH,MAAM,CAACI,GAAG,CAAE,kBAAiBhB,IAAK,EAAC,EAAE;QAACiB,MAAM,EAAEH;MAAW,CAAC,CAAC;MACpG,MAAMI,OAAO,GAAGH,GAAG,CAACI,IAAI,CAACA,IAAI;MAE7B,IAAID,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;QACtBT,aAAa,CAAC,IAAI,CAAC;MACvB;MAEAR,OAAO,CAACD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGgB,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZ,IAAI,EAAEA,KAAK,YAAYxB,aAAa,CAAC,EAAE;QACnCQ,cAAc,CAAC,IAAI,CAAC;MACxB;IACJ,CAAC,SAAS;MACNE,gBAAgB,CAAC,KAAK,CAAC;MACvBE,gBAAgB,CAAC,IAAI,CAAC;IAC1B;EAEJ,CAAC,EAAE,CAACG,MAAM,EAAEF,UAAU,EAAEV,IAAI,CAAC,CAAC;EAE9BL,SAAS,CAAC,MAAM;IACZ,MAAM2B,EAAE,GAAG,IAAIC,eAAe,CAAC,CAAC;IAChC,KAAKV,OAAO,CAACS,EAAE,CAACL,MAAM,CAAC;IAEvB,OAAO,MAAM;MACTK,EAAE,CAACE,KAAK,CAAC,CAAC;IACd,CAAC;EACL,CAAC,EAAE,CAACX,OAAO,CAAC,CAAC;EAEb,OAAO;IACHX,IAAI;IACJuB,iBAAiB,EAAEjB,aAAa;IAChCJ,WAAW;IACXE,aAAa;IACboB,SAAS,EAAEb;EACf,CAAC;AACL;AAACZ,EAAA,CAtDeF,iBAAiB;EAAA,QASZD,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}